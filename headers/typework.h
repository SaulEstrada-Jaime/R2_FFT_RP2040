//estructura del numero complejo
typedef struct {
    float Re;
    float Im;
} complex;

//------------------------------- Tablas de datos -------------------------------

const int bit_reverse_table[256] = {
  0,128, 64,192, 32,160, 96,224, 16,144, 80,208, 48,176,112,240,  8,136, 72,200, 40,168,104,232, 24,152, 88,216, 56,184,120,248,  
  4,132, 68,196, 36,164,100,228, 20,148, 84,212, 52,180,116,244, 12,140, 76,204, 44,172,108,236, 28,156, 92,220, 60,188,124,252,  
  2,130, 66,194, 34,162, 98,226, 18,146, 82,210, 50,178,114,242, 10,138, 74,202, 42,170,106,234, 26,154, 90,218, 58,186,122,250,  
  6,134, 70,198, 38,166,102,230, 22,150, 86,214, 54,182,118,246, 14,142, 78,206, 46,174,110,238, 30,158, 94,222, 62,190,126,254,  
  1,129, 65,193, 33,161, 97,225, 17,145, 81,209, 49,177,113,241,  9,137, 73,201, 41,169,105,233, 25,153, 89,217, 57,185,121,249,  
  5,133, 69,197, 37,165,101,229, 21,149, 85,213, 53,181,117,245, 13,141, 77,205, 45,173,109,237, 29,157, 93,221, 61,189,125,253,  
  3,131, 67,195, 35,163, 99,227, 19,147, 83,211, 51,179,115,243, 11,139, 75,203, 43,171,107,235, 27,155, 91,219, 59,187,123,251,  
  7,135, 71,199, 39,167,103,231, 23,151, 87,215, 55,183,119,247, 15,143, 79,207, 47,175,111,239, 31,159, 95,223, 63,191,127,255};

const complex Wn_table[128] = 
   {{ 1.000f, -0.000f },
    { 1.000f, -0.025f },
    { 0.999f, -0.049f },
    { 0.997f, -0.074f },
    { 0.995f, -0.098f },
    { 0.992f, -0.122f },
    { 0.989f, -0.147f },
    { 0.985f, -0.171f },
    { 0.981f, -0.195f },
    { 0.976f, -0.219f },
    { 0.970f, -0.243f },
    { 0.964f, -0.267f },
    { 0.957f, -0.290f },
    { 0.950f, -0.314f },
    { 0.942f, -0.337f },
    { 0.933f, -0.360f },
    { 0.924f, -0.383f },
    { 0.914f, -0.405f },
    { 0.904f, -0.428f },
    { 0.893f, -0.450f },
    { 0.882f, -0.471f },
    { 0.870f, -0.493f },
    { 0.858f, -0.514f },
    { 0.845f, -0.535f },
    { 0.831f, -0.556f },
    { 0.818f, -0.576f },
    { 0.803f, -0.596f },
    { 0.788f, -0.615f },
    { 0.773f, -0.634f },
    { 0.757f, -0.653f },
    { 0.741f, -0.672f },
    { 0.724f, -0.690f },
    { 0.707f, -0.707f },
    { 0.690f, -0.724f },
    { 0.672f, -0.741f },
    { 0.653f, -0.757f },
    { 0.634f, -0.773f },
    { 0.615f, -0.788f },
    { 0.596f, -0.803f },
    { 0.576f, -0.818f },
    { 0.556f, -0.831f },
    { 0.535f, -0.845f },
    { 0.514f, -0.858f },
    { 0.493f, -0.870f },
    { 0.471f, -0.882f },
    { 0.450f, -0.893f },
    { 0.428f, -0.904f },
    { 0.405f, -0.914f },
    { 0.383f, -0.924f },
    { 0.360f, -0.933f },
    { 0.337f, -0.942f },
    { 0.314f, -0.950f },
    { 0.290f, -0.957f },
    { 0.267f, -0.964f },
    { 0.243f, -0.970f },
    { 0.219f, -0.976f },
    { 0.195f, -0.981f },
    { 0.171f, -0.985f },
    { 0.147f, -0.989f },
    { 0.122f, -0.992f },
    { 0.098f, -0.995f },
    { 0.074f, -0.997f },
    { 0.049f, -0.999f },
    { 0.025f, -1.000f },
    { 0.000f, -1.000f },
    { -0.025f, -1.000f },
    { -0.049f, -0.999f },
    { -0.074f, -0.997f },
    { -0.098f, -0.995f },
    { -0.122f, -0.992f },
    { -0.147f, -0.989f },
    { -0.171f, -0.985f },
    { -0.195f, -0.981f },
    { -0.219f, -0.976f },
    { -0.243f, -0.970f },
    { -0.267f, -0.964f },
    { -0.290f, -0.957f },
    { -0.314f, -0.950f },
    { -0.337f, -0.942f },
    { -0.360f, -0.933f },
    { -0.383f, -0.924f },
    { -0.405f, -0.914f },
    { -0.428f, -0.904f },
    { -0.450f, -0.893f },
    { -0.471f, -0.882f },
    { -0.493f, -0.870f },
    { -0.514f, -0.858f },
    { -0.535f, -0.845f },
    { -0.556f, -0.831f },
    { -0.576f, -0.818f },
    { -0.596f, -0.803f },
    { -0.615f, -0.788f },
    { -0.634f, -0.773f },
    { -0.653f, -0.757f },
    { -0.672f, -0.741f },
    { -0.690f, -0.724f },
    { -0.707f, -0.707f },
    { -0.724f, -0.690f },
    { -0.741f, -0.672f },
    { -0.757f, -0.653f },
    { -0.773f, -0.634f },
    { -0.788f, -0.615f },
    { -0.803f, -0.596f },
    { -0.818f, -0.576f },
    { -0.831f, -0.556f },
    { -0.845f, -0.535f },
    { -0.858f, -0.514f },
    { -0.870f, -0.493f },
    { -0.882f, -0.471f },
    { -0.893f, -0.450f },
    { -0.904f, -0.428f },
    { -0.914f, -0.405f },
    { -0.924f, -0.383f },
    { -0.933f, -0.360f },
    { -0.942f, -0.337f },
    { -0.950f, -0.314f },
    { -0.957f, -0.290f },
    { -0.964f, -0.267f },
    { -0.970f, -0.243f },
    { -0.976f, -0.219f },
    { -0.981f, -0.195f },
    { -0.985f, -0.171f },
    { -0.989f, -0.147f },
    { -0.992f, -0.122f },
    { -0.995f, -0.098f },
    { -0.997f, -0.074f },
    { -0.999f, -0.049f },
    { -1.000f, -0.025f }
};

//Tabla de las potencias de -Wn (Bn)
const complex Bn_table[128] = 
   {{ 1.000f, 0.000f },
    { 1.000f, 0.025f },
    { 0.999f, 0.049f },
    { 0.997f, 0.074f },
    { 0.995f, 0.098f },
    { 0.992f, 0.122f },
    { 0.989f, 0.147f },
    { 0.985f, 0.171f },
    { 0.981f, 0.195f },
    { 0.976f, 0.219f },
    { 0.970f, 0.243f },
    { 0.964f, 0.267f },
    { 0.957f, 0.290f },
    { 0.950f, 0.314f },
    { 0.942f, 0.337f },
    { 0.933f, 0.360f },
    { 0.924f, 0.383f },
    { 0.914f, 0.405f },
    { 0.904f, 0.428f },
    { 0.893f, 0.450f },
    { 0.882f, 0.471f },
    { 0.870f, 0.493f },
    { 0.858f, 0.514f },
    { 0.845f, 0.535f },
    { 0.831f, 0.556f },
    { 0.818f, 0.576f },
    { 0.803f, 0.596f },
    { 0.788f, 0.615f },
    { 0.773f, 0.634f },
    { 0.757f, 0.653f },
    { 0.741f, 0.672f },
    { 0.724f, 0.690f },
    { 0.707f, 0.707f },
    { 0.690f, 0.724f },
    { 0.672f, 0.741f },
    { 0.653f, 0.757f },
    { 0.634f, 0.773f },
    { 0.615f, 0.788f },
    { 0.596f, 0.803f },
    { 0.576f, 0.818f },
    { 0.556f, 0.831f },
    { 0.535f, 0.845f },
    { 0.514f, 0.858f },
    { 0.493f, 0.870f },
    { 0.471f, 0.882f },
    { 0.450f, 0.893f },
    { 0.428f, 0.904f },
    { 0.405f, 0.914f },
    { 0.383f, 0.924f },
    { 0.360f, 0.933f },
    { 0.337f, 0.942f },
    { 0.314f, 0.950f },
    { 0.290f, 0.957f },
    { 0.267f, 0.964f },
    { 0.243f, 0.970f },
    { 0.219f, 0.976f },
    { 0.195f, 0.981f },
    { 0.171f, 0.985f },
    { 0.147f, 0.989f },
    { 0.122f, 0.992f },
    { 0.098f, 0.995f },
    { 0.074f, 0.997f },
    { 0.049f, 0.999f },
    { 0.025f, 1.000f },
    { 0.000f, 1.000f },
    { -0.025f, 1.000f },
    { -0.049f, 0.999f },
    { -0.074f, 0.997f },
    { -0.098f, 0.995f },
    { -0.122f, 0.992f },
    { -0.147f, 0.989f },
    { -0.171f, 0.985f },
    { -0.195f, 0.981f },
    { -0.219f, 0.976f },
    { -0.243f, 0.970f },
    { -0.267f, 0.964f },
    { -0.290f, 0.957f },
    { -0.314f, 0.950f },
    { -0.337f, 0.942f },
    { -0.360f, 0.933f },
    { -0.383f, 0.924f },
    { -0.405f, 0.914f },
    { -0.428f, 0.904f },
    { -0.450f, 0.893f },
    { -0.471f, 0.882f },
    { -0.493f, 0.870f },
    { -0.514f, 0.858f },
    { -0.535f, 0.845f },
    { -0.556f, 0.831f },
    { -0.576f, 0.818f },
    { -0.596f, 0.803f },
    { -0.615f, 0.788f },
    { -0.634f, 0.773f },
    { -0.653f, 0.757f },
    { -0.672f, 0.741f },
    { -0.690f, 0.724f },
    { -0.707f, 0.707f },
    { -0.724f, 0.690f },
    { -0.741f, 0.672f },
    { -0.757f, 0.653f },
    { -0.773f, 0.634f },
    { -0.788f, 0.615f },
    { -0.803f, 0.596f },
    { -0.818f, 0.576f },
    { -0.831f, 0.556f },
    { -0.845f, 0.535f },
    { -0.858f, 0.514f },
    { -0.870f, 0.493f },
    { -0.882f, 0.471f },
    { -0.893f, 0.450f },
    { -0.904f, 0.428f },
    { -0.914f, 0.405f },
    { -0.924f, 0.383f },
    { -0.933f, 0.360f },
    { -0.942f, 0.337f },
    { -0.950f, 0.314f },
    { -0.957f, 0.290f },
    { -0.964f, 0.267f },
    { -0.970f, 0.243f },
    { -0.976f, 0.219f },
    { -0.981f, 0.195f },
    { -0.985f, 0.171f },
    { -0.989f, 0.147f },
    { -0.992f, 0.122f },
    { -0.995f, 0.098f },
    { -0.997f, 0.074f },
    { -0.999f, 0.049f },
    { -1.000f, 0.025f },
};

//------------------------------- Complex work -------------------------------

//funcion para la multiplicacion de dos numeros complejos
complex dot_complex(complex z, complex w) {
    return (complex){
        .Re = z.Re * w.Re - z.Im * w.Im,
        .Im = z.Re * w.Im + z.Im * w.Re
    };
}
//funcion para la suma de dos numeros complejos
complex sum_complex(complex z, complex w) {
    return (complex){ z.Re + w.Re, z.Im + w.Im };
}

//------------------------------- Bitwork -------------------------------

void complex_swap(complex* z, complex* w){
    complex temp = *z;
    *z = *w;
    *w = temp;
}

void bit_reversal_permutation(complex* x, complex* reordered, unsigned short N) {
    for (unsigned int i = 0; i < N; i++) {
        unsigned int j = bit_reverse_table[i];
        reordered[j] = x[i];
    }
}